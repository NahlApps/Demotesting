// assets/js/validation.js
import { locale } from "./config.js";

// Intl-Tel-Input
let itiInstance = null;

const errorMapAR = [
  "رقم غير صحيح",
  "رمز دولة غير صحيح",
  "المُدخل أقصر من المتوقع",
  "المُدخل أطول من المتوقع",
  "رقم غير صحيح",
];

export function initPhoneInput() {
  const input = document.querySelector("#mobile");
  if (!input || window.intlTelInput == null) return null;

  itiInstance = window.intlTelInput(input, {
    utilsScript:
      "https://cdn.jsdelivr.net/npm/intl-tel-input@24.4.0/build/js/utils.js",
    countryOrder: ["sa", "qa"],
    initialCountry: "sa",
    onlyCountries: ["sa", "qa", "ae", "om", "kw", "bh"],
    excludeCountries: ["il"],
    strictMode: true,
    i18n: {}, // keep default plugin labels; we only show our error messages
  });

  // optional: log / sanity
  input.addEventListener("change", () => {
    const msg =
      errorMapAR[itiInstance.getValidationError()] || "رقم غير صحيح";
    console.debug("[phone]", getPhone(), isPhoneValid(), msg);
  });

  return itiInstance;
}

export function getPhone() {
  return itiInstance ? itiInstance.getNumber().replace(/^\+/, "") : "";
}
export function getDialCode() {
  return itiInstance ? itiInstance.getSelectedCountryData().dialCode : "";
}
export function isPhoneValid() {
  return itiInstance ? itiInstance.isValidNumber() : false;
}

export function checkNumberValidity() {
  const numberEl = document.getElementById("mobile");
  if (!numberEl || !itiInstance) return false;

  const phoneNumber = getPhone();
  const valid = isPhoneValid();

  if (!phoneNumber || !valid) {
    numberEl.setCustomValidity(
      locale === "ar" ? (errorMapAR[itiInstance.getValidationError()] || "رقم غير صحيح")
                      : "Please enter a valid phone number"
    );
    return false;
  }

  // SA special-case from your original logic
  if (getDialCode() === "966") {
    const raw = itiInstance.getNumber();
    // raw like +9665xxxxxxx expected. Old code blocked "05" at substring(4,6)
    if (raw.substring(4, 6) === "05") {
      numberEl.setCustomValidity(
        locale === "ar" ? "الرجاء ادخال رقم الهاتف بطريقة صحيحة" : "Please enter a valid phone number"
      );
      return false;
    }
  }

  numberEl.setCustomValidity("");
  return true;
}

// Plate input sanitization & validation (4 digits max)
export function attachPlateSanitizer() {
  const plate = document.getElementById("plateNumber");
  if (!plate) return;
  plate.addEventListener("input", () => {
    plate.value = plate.value.replace(/\D/g, "").slice(0, 4);
    plate.setCustomValidity("");
    updateLocationDescription();
  });
}

// Update hidden description (brand, model, plate)
export function updateLocationDescription() {
  const brand = (document.getElementById("carBrand")?.value || "").trim();
  const name = (document.getElementById("carName")?.value || "").trim();
  const plate = (document.getElementById("plateNumber")?.value || "").trim();
  const description = [brand, name, plate].filter(Boolean).join(", ");
  const out = document.getElementById("locationDescription");
  if (out) out.value = description;
}

// Expose required inline handlers (to keep existing HTML attributes working)
window.checkNumberValidity = checkNumberValidity;
window.updateLocationDescription = updateLocationDescription;
window.handleSubmit = (e) => e?.preventDefault();
